package com.pousheng.middle.order.impl.service;

import com.google.common.base.Throwables;
import com.pousheng.middle.order.dto.reverseLogistic.ReverseHeadlessCriteria;
import com.pousheng.middle.order.impl.dao.ReverseHeadlessInfoDao;
import com.pousheng.middle.order.model.ReverseHeadlessInfo;
import com.pousheng.middle.order.service.ReverseHeadlessInfoReadService;
import io.terminus.common.model.Paging;
import io.terminus.common.model.Response;
import io.terminus.common.utils.JsonMapper;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * Code generated by terminus code gen
 * Desc: 读服务实现类
 * Date: 2019-06-03
 */
@Slf4j
@Service
public class ReverseHeadlessInfoReadServiceImpl implements ReverseHeadlessInfoReadService {

    private final ReverseHeadlessInfoDao reverseHeadlessInfoDao;

    @Autowired
    public ReverseHeadlessInfoReadServiceImpl(ReverseHeadlessInfoDao reverseHeadlessInfoDao) {
        this.reverseHeadlessInfoDao = reverseHeadlessInfoDao;
    }

    @Override
    public Response<ReverseHeadlessInfo> findReverseHeadlessInfoById(Long reverseHeadlessInfoId) {
        try {
            return Response.ok(reverseHeadlessInfoDao.findById(reverseHeadlessInfoId));
        } catch (Exception e) {
            log.error("find reverseHeadlessInfo by id failed, reverseHeadlessInfoId:{}, cause:{}", reverseHeadlessInfoId, Throwables.getStackTraceAsString(e));
            return Response.fail("reverseHeadlessInfo.find.fail");
        }
    }

    @Override
    public Response<ReverseHeadlessInfo> findReverseHeadlessInfoByUniqueNo(String uniqueNo) {
        try {
            return Response.ok(reverseHeadlessInfoDao.findReverseHeadlessInfoByUniqueNo(uniqueNo));
        } catch (Exception e) {
            log.error("find reverseHeadlessInfo by uniqueNo failed, uniqueNo:{}, cause:{}", uniqueNo, Throwables.getStackTraceAsString(e));
            return Response.fail("reverseHeadlessInfo.find.fail");
        }
    }

    @Override
    public Response<Paging<ReverseHeadlessInfo>> paging(ReverseHeadlessCriteria reverseHeadlessCriteria) {

        try {
            return Response.ok(reverseHeadlessInfoDao.paging(reverseHeadlessCriteria.toMap()));
        } catch (Exception e) {
            log.error("reverseHeadlessInfo.paging.fail param={},errorMsg={}", JsonMapper.nonEmptyMapper().toJson(reverseHeadlessCriteria),Throwables.getStackTraceAsString(e));
            return Response.fail("reverseHeadlessInfo.paging.fail");
        }
    }

    @Override
    public Response<Long> countReverseHeadless(ReverseHeadlessCriteria reverseHeadlessCriteria) {

        try {
            return Response.ok(reverseHeadlessInfoDao.countHeadLeass(reverseHeadlessCriteria.toMap()));
        } catch (Exception e) {
            log.error("reverseHeadlessInfo.count.fail param={},errorMsg={}", JsonMapper.nonEmptyMapper().toJson(reverseHeadlessCriteria),Throwables.getStackTraceAsString(e));
            return Response.fail("reverseHeadlessInfo.count.fail");
        }

    }
}
