package com.pousheng.middle.order.impl.service;

import com.google.common.base.Throwables;
import com.pousheng.middle.order.dto.reverseLogistic.ReverseExpressCriteria;
import com.pousheng.middle.order.impl.dao.ReverseExpressInfoDao;
import com.pousheng.middle.order.model.ReverseExpressInfo;
import com.pousheng.middle.order.service.ReverseExpressInfoReadService;
import io.terminus.common.model.Paging;
import io.terminus.common.model.Response;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * Code generated by terminus code gen Desc: 读服务实现类 Date: 2019-06-03
 */
@Slf4j
@Service
public class ReverseExpressInfoReadServiceImpl implements ReverseExpressInfoReadService {

    private final ReverseExpressInfoDao reverseExpressInfoDao;

    @Autowired
    public ReverseExpressInfoReadServiceImpl(ReverseExpressInfoDao reverseExpressInfoDao) {
        this.reverseExpressInfoDao = reverseExpressInfoDao;
    }

    @Override
    public Response<ReverseExpressInfo> findReverseExpressInfoById(Long reverseExpressInfoId) {
        try {
            return Response.ok(reverseExpressInfoDao.findById(reverseExpressInfoId));
        } catch (Exception e) {
            log.error("find reverseExpressInfo by id failed, reverseExpressInfoId:{}, cause:{}", reverseExpressInfoId,
                Throwables.getStackTraceAsString(e));
            return Response.fail("reverseExpressInfo.find.fail");
        }
    }

    @Override
    public Response<ReverseExpressInfo> findReverseExpressInfoByTransferOrderIdAndLineNo(String transferOrderId,
                                                                                         String lineNo) {
        try {
            ReverseExpressCriteria criteria=new ReverseExpressCriteria();
            criteria.setTransferOrderId(transferOrderId);
            criteria.setLineNo(lineNo);
            return Response.ok(reverseExpressInfoDao.findExpressByTransferAndLine(criteria.toMap()));
        } catch (Exception e) {
            log.error("find reverseExpressInfo by transferOrder and lineNo failed, transferOrder:{},lineNo:{} cause:{}", transferOrderId,
                 lineNo,
                Throwables.getStackTraceAsString(e));
            return Response.fail("reverseExpressInfo.find.fail");
        }
    }

    @Override
    public Response<ReverseExpressInfo> findReverseExpressInfoByExpressNo(String expressNo) {

        try {
            return Response.ok(reverseExpressInfoDao.findReverseExpressInfoByExpressNo(expressNo));
        } catch (Exception e) {
            log.error("findReverseExpressInfoByExpressNo.fail", Throwables.getStackTraceAsString(e));
            return Response.fail("findReverseExpressInfoByExpressNo.fail");
        }
    }

    @Override
    public Response<Paging<ReverseExpressInfo>> paging(ReverseExpressCriteria reverseExpressCriteria) {

        try {
            return Response.ok(reverseExpressInfoDao.paging(reverseExpressCriteria.toMap()));
        } catch (Exception e) {
            log.error("reverseExpressInfo.paging.fail", Throwables.getStackTraceAsString(e));
            return Response.fail("reverseExpressInfo.paging.fail");
        }
    }

    @Override
    public Response<Long> countReverseInstore(ReverseExpressCriteria reverseExpressCriteria) {

        return Response.ok(reverseExpressInfoDao.countReverseExpress(reverseExpressCriteria.toMap()));
    }
}
