<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright (c) 2017 杭州端点网络科技有限公司
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="PoushengCompensateBiz">
    <resultMap id="PoushengCompensateBizMap" type="PoushengCompensateBiz">
        <id column="id" property="id"/>
        <result column="biz_id" property="bizId"/>
        <result column="biz_type" property="bizType"/>
        <result column="context" property="context"/>
        <result column="status" property="status"/>
        <result column="cnt" property="cnt"/>
        <result column="last_failed_reason" property="lastFailedReason"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>

    </resultMap>

    <sql id="tb">
        pousheng_compensate_biz
    </sql>

    <sql id="cols_all">
        id, <include refid="cols_exclude_id" />
    </sql>

    <sql id="cols_exclude_id">
        biz_id, biz_type, context, status,cnt,last_failed_reason, created_at, updated_at
    </sql>

    <sql id="vals">
        #{bizId}, #{bizType}, #{context}, #{status},#{cnt},#{lastFailedReason}, now(), now()
    </sql>

    <sql id="queryCondition">

        <if test="bizId != null">and `biz_id` = #{bizId}</if>

        <if test="bizType != null">and `biz_type` = #{bizType}</if>

        <if test="context != null">and `context` = #{context}</if>

        <if test="status != null">and `status` = #{status}</if>

        <if test="cnt != null">and `cnt` = #{cnt}</if>

        <if test="ignoreCnt != null">and <![CDATA[ cnt < #{ignoreCnt} ]]></if>

        <if test="lastFailedReason != null">and `last_failed_reason` = #{lastFailedReason}</if>

        <if test="createdAt != null">and `created_at` = #{createdAt}</if>

        <if test="updatedAt != null">and `updated_at` = #{updatedAt}</if>

        <if test="startCreatedAt != null">AND <![CDATA[created_at >= #{startCreatedAt}]]></if>

        <if test="endCreatedAt != null">AND <![CDATA[created_at <= #{endCreatedAt}]]></if>
    </sql>

    <sql id="order">
        order by id desc
    </sql>

    <insert id="create" parameterType="PoushengCompensateBiz" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO
        <include refid="tb" />
        (<include refid="cols_exclude_id" />)
        VALUES
        (<include refid="vals" />)
    </insert>

    <select id="findById" parameterType="long" resultMap="PoushengCompensateBizMap" >
        SELECT <include refid="cols_all" />
        FROM <include refid="tb" />
        WHERE id = #{id}
    </select>

   <select id="findByIds" parameterType="list" resultMap="PoushengCompensateBizMap">
        select id, <include refid="cols_exclude_id"/>
        from <include refid="tb"/>
        where id in
        <foreach collection="list" open="(" separator="," close=")"
                 item="item">
            #{item}
        </foreach>
        <include refid="order" />
    </select>

    <select id="findByIdsAndStatus" parameterType="map" resultMap="PoushengCompensateBizMap">
        select id, <include refid="cols_exclude_id"/>
        from <include refid="tb"/>
        where id in
        <foreach collection="ids" open="(" separator="," close=")"
                 item="item">
            #{item}
        </foreach>
        and status = #{status}
        <include refid="order" />
    </select>

    <update id="update" parameterType="PoushengCompensateBiz">
        UPDATE
        <include refid="tb"/>
        <set>
            <if test="bizId != null">`biz_id` = #{bizId},</if>
            <if test="bizType != null">`biz_type` = #{bizType},</if>
            <if test="context != null">`context` = #{context},</if>
            <if test="status != null">`status` = #{status},</if>
            <if test="cnt != null">`cnt` = #{cnt},</if>
            <if test="lastFailedReason != null">`last_failed_reason` = #{lastFailedReason},</if>
            updated_at=now()
        </set>
        WHERE id = #{id}
    </update>

    <delete id="delete" parameterType="long">
        DELETE FROM <include refid="tb"/>
        WHERE id = #{id}
    </delete>

    <select id="paging" parameterType="list" resultMap="PoushengCompensateBizMap">
        select id, <include refid="cols_exclude_id"/>
        from <include refid="tb"/>
        <where>
        <include refid="queryCondition"/>
        </where>
        limit #{offset},#{limit}
    </select>

    <select id="pagingIds" parameterType="map" resultType="long">
        SELECT <include refid="cols_all"/> FROM <include refid="tb"/>
        <where>
            <include refid="queryCondition"/>
        </where>
        limit #{offset}, #{limit}
    </select>


    <select id="pagingForShow" parameterType="list" resultMap="PoushengCompensateBizMap">
        select id, <include refid="cols_exclude_id"/>
        from <include refid="tb"/>
        <where>
            <include refid="queryCondition"/>
        </where>
        order by id desc limit #{offset},#{limit}
    </select>

    <select id="count" parameterType="list" resultType="long">
        select count(1)
        from <include refid="tb"/>
        <where>
        <include refid="queryCondition"/>
        </where>
    </select>


    <update id="updateStatus" parameterType="map">
        UPDATE
        <include refid="tb"/>
        SET updated_at=now(),
        status = #{newStatus}
        WHERE id=#{id} AND status = #{currentStatus}
    </update>
    
    <update id="updateStatusByContextInTwoHours" parameterType="map">
        UPDATE
        <include refid="tb"/>
        SET updated_at=now(),
        status = #{newStatus}
        WHERE context=#{context} AND status = #{currentStatus} AND biz_type = #{bizType} AND created_at > now() - INTERVAL 2 HOUR
    </update>
    
    <update id="updateTypeByContextOnlyIfOfWaitHandleStatus" parameterType="map">
        UPDATE
        <include refid="tb"/>
        SET updated_at=now(),
        biz_type = #{newType}
        WHERE context=#{context} AND biz_type = #{currentType} AND status = 'WAIT_HANDLE'
    </update>

    <update id="batchUpdateStatus" parameterType="map">
        UPDATE
        <include refid="tb"/>
        <set>
            status = #{status},
            updated_at=now()
        </set>
        where id in
        <foreach collection="ids" open="(" separator="," close=")"
                 item="id">
            #{id}
        </foreach>
    </update>

    <update id="resetStatus">
        UPDATE
        <include refid="tb"/>
        <set>
            status = 'WAIT_HANDLE',
            updated_at=now()
        </set>
        where status = 'PROCESSING' and biz_type !='EXPORT_TRADE_BILL' and <![CDATA[ updated_at < date_add(now(),interval - 120 minute) ]]>
    </update>


</mapper>
