package com.pousheng.middle.order.impl.service;

import com.google.common.base.Throwables;
import com.pousheng.middle.order.impl.dao.ReverseInstoreInfoDao;
import com.pousheng.middle.order.model.ReverseInstoreInfo;
import com.pousheng.middle.order.service.ReverseInstoreInfoWriteService;
import io.terminus.common.model.Response;
import io.terminus.common.utils.JsonMapper;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * Code generated by terminus code gen
 * Desc: 写服务实现类
 * Date: 2019-06-03
 */
@Slf4j
@Service
public class ReverseInstoreInfoWriteServiceImpl implements ReverseInstoreInfoWriteService {

    private final ReverseInstoreInfoDao reverseInstoreInfoDao;

    @Autowired
    public ReverseInstoreInfoWriteServiceImpl(ReverseInstoreInfoDao reverseInstoreInfoDao) {
        this.reverseInstoreInfoDao = reverseInstoreInfoDao;
    }

    @Override
    public Response<Long> createReverseInstoreInfo(ReverseInstoreInfo reverseInstoreInfo) {
        try {
            reverseInstoreInfoDao.create(reverseInstoreInfo);
            return Response.ok(reverseInstoreInfo.getId());
        } catch (Exception e) {
            log.error("create reverseInstoreInfo failed, reverseInstoreInfo:{}, cause:{}", reverseInstoreInfo, Throwables.getStackTraceAsString(e));
            return Response.fail("reverseInstoreInfo.create.fail");
        }
    }

    @Override
    public Response<Long> batchCreateOrUpdate(List<ReverseInstoreInfo> reverseInstoreInfoList) {
        try {
            reverseInstoreInfoDao.batchCreate(reverseInstoreInfoList);
            return Response.ok();
        } catch (Exception e) {
            log.error("batch create reverseInstoreInfo failed, reverseInstoreInfo:{}, cause:{}", JsonMapper.nonEmptyMapper().toJson(reverseInstoreInfoList), Throwables.getStackTraceAsString(e));
            return Response.fail("reverseInstoreInfo.batch.create.fail");
        }
    }

    @Override
    public Response<Boolean> updateReverseInstoreInfo(ReverseInstoreInfo reverseInstoreInfo) {
        try {
            return Response.ok(reverseInstoreInfoDao.update(reverseInstoreInfo));
        } catch (Exception e) {
            log.error("update reverseInstoreInfo failed, reverseInstoreInfo:{}, cause:{}", reverseInstoreInfo, Throwables.getStackTraceAsString(e));
            return Response.fail("reverseInstoreInfo.update.fail");
        }
    }

    @Override
    public Response<Boolean> deleteReverseInstoreInfoById(Long reverseInstoreInfoId) {
        try {
            return Response.ok(reverseInstoreInfoDao.delete(reverseInstoreInfoId));
        } catch (Exception e) {
            log.error("delete reverseInstoreInfo failed, reverseInstoreInfoId:{}, cause:{}", reverseInstoreInfoId, Throwables.getStackTraceAsString(e));
            return Response.fail("reverseInstoreInfo.delete.fail");
        }
    }
}
