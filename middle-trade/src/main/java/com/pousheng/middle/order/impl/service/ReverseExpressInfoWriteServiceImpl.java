package com.pousheng.middle.order.impl.service;

import com.google.common.base.Throwables;
import com.pousheng.middle.order.impl.dao.ReverseExpressInfoDao;
import com.pousheng.middle.order.model.ReverseExpressInfo;
import com.pousheng.middle.order.service.ReverseExpressInfoWriteService;
import io.terminus.common.model.Response;
import io.terminus.common.utils.JsonMapper;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * Code generated by terminus code gen
 * Desc: 写服务实现类
 * Date: 2019-06-03
 */
@Slf4j
@Service
public class ReverseExpressInfoWriteServiceImpl implements ReverseExpressInfoWriteService {

    private final ReverseExpressInfoDao reverseExpressInfoDao;

    @Autowired
    public ReverseExpressInfoWriteServiceImpl(ReverseExpressInfoDao reverseExpressInfoDao) {
        this.reverseExpressInfoDao = reverseExpressInfoDao;
    }

    @Override
    public Response<Long> createReverseExpressInfo(ReverseExpressInfo reverseExpressInfo) {
        try {
            reverseExpressInfoDao.create(reverseExpressInfo);
            return Response.ok(reverseExpressInfo.getId());
        } catch (Exception e) {
            log.error("create reverseExpressInfo failed, reverseExpressInfo:{}, cause:{}", reverseExpressInfo, Throwables.getStackTraceAsString(e));
            return Response.fail("reverseExpressInfo.create.fail");
        }
    }

    @Override
    public Response<Long> batchCreateOrUpdate(List<ReverseExpressInfo> reverseExpressInfo) {
        try {
            reverseExpressInfoDao.batchCreate(reverseExpressInfo);
            return Response.ok();
        } catch (Exception e) {
            log.error("batch create reverseExpressInfo failed, reverseExpressInfo:{}, cause:{}", JsonMapper.nonEmptyMapper().toJson(reverseExpressInfo), Throwables.getStackTraceAsString(e));
            return Response.fail("reverseExpressInfo.batch.create.fail");
        }
    }

    @Override
    public Response<Boolean> updateReverseExpressInfo(ReverseExpressInfo reverseExpressInfo) {
        try {
            return Response.ok(reverseExpressInfoDao.update(reverseExpressInfo));
        } catch (Exception e) {
            log.error("update reverseExpressInfo failed, reverseExpressInfo:{}, cause:{}", reverseExpressInfo, Throwables.getStackTraceAsString(e));
            return Response.fail("reverseExpressInfo.update.fail");
        }
    }

    @Override
    public Response<Boolean> deleteReverseExpressInfoById(Long reverseExpressInfoId) {
        try {
            return Response.ok(reverseExpressInfoDao.delete(reverseExpressInfoId));
        } catch (Exception e) {
            log.error("delete reverseExpressInfo failed, reverseExpressInfoId:{}, cause:{}", reverseExpressInfoId, Throwables.getStackTraceAsString(e));
            return Response.fail("reverseExpressInfo.delete.fail");
        }
    }

}
