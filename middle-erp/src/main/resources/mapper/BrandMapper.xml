<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright (c) 2016 杭州端点网络科技有限公司, Code generated by terminus code gen
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="Brand">
    <resultMap id="BrandMap" type="Brand">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="unique_name" property="uniqueName"/>
        <result column="en_name" property="enName"/>
        <result column="en_cap" property="enCap"/>
        <result column="logo" property="logo"/>
        <result column="status" property="status"/>
        <result column="description" property="description"/>
        <result column="outer_id" property="outerId"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        
    </resultMap>

    <sql id="tb">
        parana_brands
    </sql>

    <sql id="cols_all">
        id, <include refid="cols_exclude_id" />
    </sql>

    <sql id="cols_exclude_id">
        name,
        unique_name,
        en_name,
        en_cap,
        logo,
        status,
        description,
        outer_id,
        created_at,
        updated_at
        
    </sql>

    <sql id="vals">
        #{id}, 
        #{name}, 
        #{uniqueName}, 
        #{enName}, 
        #{enCap}, 
        #{logo}, 
        #{status}, 
        #{description}, 
        #{outerId}, 
        now(), 
        now()
        
    </sql>

    <sql id="criteria">
        <if test="id != null">AND id = #{id}</if>
        <if test="name != null">AND name = #{name}</if>
        <if test="uniqueName != null">AND unique_name = #{uniqueName}</if>
        <if test="enName != null">AND en_name = #{enName}</if>
        <if test="enCap != null">AND en_cap = #{enCap}</if>
        <if test="logo != null">AND logo = #{logo}</if>
        <if test="status != null">AND status = #{status}</if>
        <if test="description != null">AND description = #{description}</if>
        <if test="outerId != null">AND outer_id = #{outerId}</if>

    </sql>

    <insert id="create" parameterType="Brand" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO <include refid="tb" />
        (<include refid="cols_exclude_id" />)
        VALUES
        (<include refid="vals" />)
    </insert>

    <insert id="creates" parameterType="list">
        INSERT INTO <include refid="tb" />
        (<include refid="cols_exclude_id" />)
        VALUES
        <foreach collection="list" separator="," item="item">
            (
                #{item.name},
                #{item.uniqueName}, 
                #{item.enName}, 
                #{item.enCap}, 
                #{item.logo}, 
                #{item.status}, 
                #{item.description}, 
                #{item.outerId}, 
                now(), 
                now()
                
            )
        </foreach>
    </insert>

    <select id="findById" parameterType="long" resultMap="BrandMap" >
        SELECT <include refid="cols_all" /> FROM <include refid="tb" />
        WHERE id = #{id}
    </select>

    <update id="update" parameterType="Brand">
        UPDATE <include refid="tb"/>
        <set>
            <if test="name != null">name = #{name},</if>
            <if test="uniqueName != null">unique_name = #{uniqueName},</if>
            <if test="enName != null">en_name = #{enName},</if>
            <if test="enCap != null">en_Cap = #{enCap},</if>
            <if test="logo != null">logo = #{logo},</if>
            <if test="status != null">status = #{status},</if>
            <if test="description != null">description = #{description},</if>
            <if test="outerId != null">outer_id = #{outerId},</if>
            
            updated_at=now()
        </set>
        WHERE id = #{id}
    </update>

    <delete id="delete" parameterType="long">
        DELETE FROM <include refid="tb"/>
        WHERE id = #{id}
    </delete>

    <select id="list" parameterType="map" resultMap="BrandMap">
        SELECT <include refid="cols_all"/> FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
    </select>

    <select id="count" parameterType="map" resultType="long">
        SELECT count(1) FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
    </select>

    <select id="paging" parameterType="map" resultMap="BrandMap">
        SELECT <include refid="cols_all"/> FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
        LIMIT #{offset}, #{limit}
    </select>

    <select id="findByOuterId" parameterType="string" resultMap="BrandMap" >
        SELECT <include refid="cols_all"/> FROM <include refid="tb"/>
        WHERE outer_id = #{outerId}
    </select>

    <select id="getBrandsByOuterIds" parameterType="list" resultMap="BrandMap" >
        SELECT <include refid="cols_all"/> FROM <include refid="tb"/>
        WHERE outer_id IN
        <foreach collection="list" item="i" open="(" separator="," close=")" >
            #{i}
        </foreach>
    </select>

</mapper>