package com.pousheng.middle.order.impl.service;

import com.google.common.base.Throwables;
import com.google.common.collect.Maps;
import com.pousheng.middle.order.impl.dao.PoushengEspLogDao;
import com.pousheng.middle.order.model.PoushengEspLog;
import com.pousheng.middle.order.service.PoushengEspLogService;
import io.terminus.common.model.Response;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * Code generated by terminus code gen
 * Desc: Esp快递日志读服务实现类
 * Date: 2019-09-10
 */
@Slf4j
@Service
public class PoushengEspLogServiceImpl implements PoushengEspLogService {

    @Autowired
    private PoushengEspLogDao poushengEspLogDao;

    @Override
    public Response<PoushengEspLog> findPoushengEspLogById(Long poushengEspLogId) {
        try {
            return Response.ok(poushengEspLogDao.findById(poushengEspLogId));
        } catch (Exception e) {
            log.error("find poushengEspLog by id failed, poushengEspLogId:{}, cause:{}", poushengEspLogId, Throwables.getStackTraceAsString(e));
            return Response.fail("poushengEspLog.find.fail");
        }
    }

    @Override
    public Response<Long> createPoushengEspLog(PoushengEspLog poushengEspLog) {
        try {
            poushengEspLogDao.create(poushengEspLog);
            return Response.ok(poushengEspLog.getId());
        } catch (Exception e) {
            log.error("create poushengEspLog failed, poushengEspLog:{}, cause:{}", poushengEspLog, Throwables.getStackTraceAsString(e));
            return Response.fail("poushengEspLog.create.fail");
        }
    }

    @Override
    public Response<Boolean> updatePoushengEspLog(PoushengEspLog poushengEspLog) {
        try {
            return Response.ok(poushengEspLogDao.update(poushengEspLog));
        } catch (Exception e) {
            log.error("update poushengEspLog failed, poushengEspLog:{}, cause:{}", poushengEspLog, Throwables.getStackTraceAsString(e));
            return Response.fail("poushengEspLog.update.fail");
        }
    }

    @Override
    public Response<Boolean> deletePoushengEspLogById(Long poushengEspLogId) {
        try {
            return Response.ok(poushengEspLogDao.delete(poushengEspLogId));
        } catch (Exception e) {
            log.error("delete poushengEspLog failed, poushengEspLogId:{}, cause:{}", poushengEspLogId, Throwables.getStackTraceAsString(e));
            return Response.fail("poushengEspLog.delete.fail");
        }
    }

    @Override
    public Response<PoushengEspLog> findPoushengEspLogByShipmentCode(String shipmentCode) {
        try {
            return Response.ok(poushengEspLogDao.findByShipmentCode(shipmentCode));
        } catch (Exception e) {
            log.error("find poushengEspLog by shipmentCode failed, shipmentCode:{}, cause:{}", shipmentCode, Throwables.getStackTraceAsString(e));
            return Response.fail("poushengEspLog.find.fail");
        }
    }

    @Override
    public Response<List<PoushengEspLog>> findLogToRetry(Integer synStatus, Integer retryNum, Date createdAtStart, Date createdAtEnd) {
        try {
            Map<String, Object> params = Maps.newHashMap();
            if (createdAtEnd != null) {
                params.put("createdAtEnd", createdAtEnd);
            }
            params.put("createdAtStart", createdAtStart);
            params.put("retryNum", retryNum);
            params.put("synStatus", synStatus);
            return Response.ok(poushengEspLogDao.findToRetryLog(params));
        } catch (Exception e) {
            log.error("find poushengEspLog findLogToRetry failed, createdAtStart:{}, cause:{}", createdAtStart, Throwables.getStackTraceAsString(e));
            return Response.fail("poushengEspLog.find.fail");
        }
    }
}
